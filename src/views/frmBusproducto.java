/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package views;

import algoritmos.MetodosSort;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import models.entities.Producto;
import services.ProductoService;
import services.impl.ProductoServiceImpl;

/**
 *
 * @author ELIAS
 */
public class frmBusproducto extends javax.swing.JDialog {
 DefaultTableModel dtm = new DefaultTableModel();
    /**
     * Creates new form frmBuspedido
     */
    public frmBusproducto(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
          CargarProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        selectSorts = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("BUSQUEDA DE PRODUCTOS");

        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDPRODUCTO", "NOMBRE", "PRECIO COSTO", "PRECIO VENTA", "VENDIDOS"
            }
        ));
        tblProductos.setName("tblProductos"); // NOI18N
        jScrollPane1.setViewportView(tblProductos);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/ok.png"))); // NOI18N
        jButton1.setText("Seleccionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/cancel.png"))); // NOI18N
        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Seleccione un metodo de ordenamiento"));

        selectSorts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Valid.png"))); // NOI18N
        jButton7.setText("Ordenar productos");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(selectSorts, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(selectSorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        RegistrarPRoducto();
 RegistrarPRoducto();
    }//GEN-LAST:event_jButton1ActionPerformed

      private void RegistrarPRoducto() {
        int fila = tblProductos.getSelectedRow();
            
        String idprod=tblProductos.getValueAt(fila, 0).toString();
        String producto = tblProductos.getValueAt(fila, 1).toString();
        String precio = tblProductos.getValueAt(fila, 3).toString();

        frmNuevoPedido.txtproducto.setText(producto);
        frmNuevoPedido.txtPrecio.setText(precio);
         frmNuevoPedido.lblidproducto.setText(idprod);
        this.dispose();

    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
private void CargarProductos() {
        String[] headers = new String[]{"ID", "Producto", "Categoria", "Costo S/", "Precio S/", "Cantidad vendida"};
        dtm.setColumnIdentifiers(headers);
        tblProductos.setModel(dtm);
        selectSorts.removeAllItems();
        selectSorts.addItem("Ordenar por cantidad vendida | Merge");
        selectSorts.addItem("Ordenar por producto | Buble");
        selectSorts.addItem("Ordenar por categoria | Selection");
        selectSorts.addItem("Ordenar por costo | Insertion");
        selectSorts.addItem("Ordenar por precio | Quick sort");
        selectSorts.addItem("Ordenar por cantidad vendida | Shell sort");

        ProductoService productoService = new ProductoServiceImpl();
        List<Producto> productos = productoService.listar();

        for (Integer count = 0; count < productos.size(); count++) {
            dtm.addRow(new Object[]{
                productos.get(count).getProducto_id(),
                productos.get(count).getProducto_nombre(),
                productos.get(count).getCategoria_nombre(),
                productos.get(count).getProducto_costo(),
                productos.get(count).getProducto_precio(),
                productos.get(count).getProducto_cantvendida(),});
        }

    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        switch (selectSorts.getSelectedIndex()) {
            case 0:
            MergeSort();
            break;
            case 1:
            BubleSort();
            break;
            case 2:
            SelectionSort();
            break;
            case 3:
            InsertioSort();
            break;
            case 4:
            QuickSort();
            break;

            case 5:
            ShellSort();
            break;

        }
    }//GEN-LAST:event_jButton7ActionPerformed

    
    private void BubleSort() {

        int tamaño_array = tblProductos.getRowCount();
        Producto listado[] = new Producto[tamaño_array];

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            listado[i] = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);

        }

        MetodosSort metodos = new MetodosSort();
        metodos.bubbleSort(listado);

        //se limpia la tabla para volver a llenar con la lista ordenada
        LimpiarTabla();
        //se vuelve a llenar la tabla
        String[] fila = new String[5];

        for (int i = 0; i < listado.length; i++) {

            fila[0] = listado[i].getProducto_nombre();
            fila[1] = listado[i].getCategoria_nombre();
            fila[2] = String.valueOf(listado[i].getProducto_costo());
            fila[3] = String.valueOf(listado[i].getProducto_precio());
            fila[4] = String.valueOf(listado[i].getProducto_cantvendida());

            dtm.addRow(fila);

        }

    }

    private void QuickSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.OrdenarQuickSort(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void MergeSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.sortGivenArray(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void SelectionSort() {

        int tamaño_array = tblProductos.getRowCount();
        Producto listado[] = new Producto[tamaño_array];

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            listado[i] = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);

        }

        MetodosSort metodos = new MetodosSort();
        metodos.selectionSort(listado);

        //se limpia la tabla para volver a llenar con la lista ordenada
        LimpiarTabla();
        //se vuelve a llenar la tabla
        String[] fila = new String[5];

        for (int i = 0; i < listado.length; i++) {

            fila[0] = listado[i].getProducto_nombre();
            fila[1] = listado[i].getCategoria_nombre();
            fila[2] = String.valueOf(listado[i].getProducto_costo());
            fila[3] = String.valueOf(listado[i].getProducto_precio());
            fila[4] = String.valueOf(listado[i].getProducto_cantvendida());

            dtm.addRow(fila);

        }

    }

    private void InsertioSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.insertionSort(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void ShellSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.ShellSort(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {
            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }
    private void LimpiarTabla() {
        //se limpia la tabla para volver a llenar con la lista ordenada
        for (int i = tblProductos.getRowCount() - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmBusproducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmBusproducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmBusproducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmBusproducto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmBusproducto dialog = new frmBusproducto(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> selectSorts;
    private javax.swing.JTable tblProductos;
    // End of variables declaration//GEN-END:variables
}
