package views;

import algoritmos.MetodosSort;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.entities.Categoria;
import models.entities.Producto;
import services.CategoriaService;
import services.ProductoService;
import services.impl.CategoriaServiceImpl;
import services.impl.ProductoServiceImpl;

public class ProductList extends javax.swing.JInternalFrame {
    
    short accion=0;
    
     List<Producto> productos ;
    DefaultTableModel dtm = new DefaultTableModel();
   

    /**
     * Creates new form ProductList
     */
    public ProductList() {
        initComponents();
         EstadoBotones(true);
        CentrarVentana();
        CargarProductos();
        CargarCategoria();
    }

    private void CentrarVentana() {
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height;
        int width = pantalla.width;

        int x = (width / 2) - this.getWidth() / 2;
        int y = (height / 2) - this.getHeight() / 2;

        this.setLocation(x, y);

    }
    
     private void EstadoBotones(boolean estado){
        
    cmdnuevo.setEnabled(estado);
    cmdcancelar.setEnabled(!estado);
    cmdguardar.setEnabled(!estado);
    cmdeditar.setEnabled(estado);
    cmdsalir.setEnabled(estado);
    
    txtProducto.setEnabled(!estado);
    txtCosto.setEnabled(!estado);
    txtPrecio.setEnabled(!estado);
//    txtCantidadVendida.setEnabled(!estado);
    cmbcat.setEnabled(!estado);
    tblProductos.setEnabled(estado);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        selectSorts = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductos = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblProducto = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtProducto = new javax.swing.JTextPane();
        lblCategoria = new javax.swing.JLabel();
        cmbcat = new javax.swing.JComboBox<>();
        lblCosto = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtCosto = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtPrecio = new javax.swing.JTextPane();
        lblPrecio = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtnombre = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        cmdnuevo = new javax.swing.JButton();
        cmdguardar = new javax.swing.JButton();
        cmdcancelar = new javax.swing.JButton();
        cmdeditar = new javax.swing.JButton();
        cmdsalir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Lista de productos");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Seleccione un metodo de ordenamiento"));

        selectSorts.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Valid.png"))); // NOI18N
        jButton7.setText("Ordenar tabla");
        jButton7.setRequestFocusEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectSorts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(selectSorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IDPRODUCTO", "NOMBRE", "CATEGORIA", "PRECIO COSTO", "PRECIO VENTA", "VENDIDOS"
            }
        ));
        tblProductos.setName("tblProductos"); // NOI18N
        tblProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProductos);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Agregar nuevo registro"));

        lblProducto.setText("Producto");

        jScrollPane2.setViewportView(txtProducto);

        lblCategoria.setText("Categoria");

        cmbcat.setEditable(true);
        cmbcat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-SELECCIONE-" }));

        lblCosto.setText("Costo");

        jScrollPane4.setViewportView(txtCosto);

        jScrollPane5.setViewportView(txtPrecio);

        lblPrecio.setText("Precio");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProducto)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCategoria)
                    .addComponent(cmbcat, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCosto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrecio)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCosto)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCategoria)
                        .addGap(7, 7, 7)
                        .addComponent(cmbcat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblProducto)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPrecio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("Buscar producto");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/find.png"))); // NOI18N
        jButton4.setText("buscar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jToolBar1.setRollover(true);

        cmdnuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/page_add.png"))); // NOI18N
        cmdnuevo.setText("Nuevo");
        cmdnuevo.setFocusable(false);
        cmdnuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdnuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdnuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdnuevoActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdnuevo);

        cmdguardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/disk_save.png"))); // NOI18N
        cmdguardar.setText("Guardar");
        cmdguardar.setEnabled(false);
        cmdguardar.setFocusable(false);
        cmdguardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdguardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdguardarActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdguardar);

        cmdcancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Cancel (2).png"))); // NOI18N
        cmdcancelar.setText("Cancelar");
        cmdcancelar.setEnabled(false);
        cmdcancelar.setFocusable(false);
        cmdcancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdcancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdcancelarActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdcancelar);

        cmdeditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/page_edit.png"))); // NOI18N
        cmdeditar.setText("Editar");
        cmdeditar.setFocusable(false);
        cmdeditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdeditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdeditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdeditarActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdeditar);

        cmdsalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/door_in.png"))); // NOI18N
        cmdsalir.setText("Salir");
        cmdsalir.setAlignmentX(100.0F);
        cmdsalir.setFocusable(false);
        cmdsalir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdsalir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdsalirActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdsalir);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Producto[] callListToOrder() {
        int tamaño_array = tblProductos.getRowCount();
        Producto listado[] = new Producto[tamaño_array];

        Producto producto = new Producto();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            producto.setCategoria_id(0);
            producto.setProducto_nombre(tblProductos.getValueAt(i, 0).toString());
            producto.setProducto_costo(Double.parseDouble(tblProductos.getValueAt(i, 2).toString()));
            producto.setProducto_precio(Double.parseDouble(tblProductos.getValueAt(i, 3).toString()));
            producto.setProducto_cantvendida(Integer.parseInt(tblProductos.getValueAt(i, 4).toString()));
            producto.setCategoria_nombre(tblProductos.getValueAt(i, 1).toString());

            listado[i] = producto;
        }

        return listado;
    }

    private void drawDataInList(Producto[] listado) {
        //se vuelve a llenar la tabla
        String[] fila = new String[5];

        for (int i = 0; i < listado.length; i++) {

            fila[0] = listado[i].getProducto_nombre();
            fila[1] = String.valueOf(listado[i].getCategoria_id());
            fila[2] = String.valueOf(listado[i].getProducto_costo());
            fila[3] = String.valueOf(listado[i].getProducto_precio());
            fila[4] = String.valueOf(listado[i].getProducto_cantvendida());

            dtm.addRow(fila);

        }
    }

    private void BubleSort() {
        Producto listado[] = callListToOrder();

        MetodosSort metodos = new MetodosSort();
        metodos.bubbleSort(listado);

        //se limpia la tabla para volver a llenar con la lista ordenada
        LimpiarTabla();
        drawDataInList(listado);
    }

    private void QuickSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.OrdenarQuickSort(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void MergeSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.sortGivenArray(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void SelectionSort() {

        int tamaño_array = tblProductos.getRowCount();
        Producto listado[] = new Producto[tamaño_array];

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        for (int i = 0; i < tblProductos.getRowCount(); i++) {

            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            listado[i] = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);

        }

        MetodosSort metodos = new MetodosSort();
        metodos.selectionSort(listado);

        //se limpia la tabla para volver a llenar con la lista ordenada
        LimpiarTabla();
        //se vuelve a llenar la tabla
        String[] fila = new String[5];

        for (int i = 0; i < listado.length; i++) {

            fila[0] = listado[i].getProducto_nombre();
            fila[1] = listado[i].getCategoria_nombre();
            fila[2] = String.valueOf(listado[i].getProducto_costo());
            fila[3] = String.valueOf(listado[i].getProducto_precio());
            fila[4] = String.valueOf(listado[i].getProducto_cantvendida());

            dtm.addRow(fila);

        }

    }

    private void InsertioSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.insertionSort(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void ShellSort() {

        String nombre;
        String nombre_categoria;
        int id;
        int id_categoria;
        double costo;
        double precio;
        int cantvendida;

        ArrayList<Producto> productos = new ArrayList();

        for (int i = 0; i < tblProductos.getRowCount(); i++) {
            id = i;
            id_categoria = 0;
            nombre = tblProductos.getValueAt(i, 0).toString();
            nombre_categoria = tblProductos.getValueAt(i, 1).toString();
            costo = Double.parseDouble(tblProductos.getValueAt(i, 2).toString());
            precio = Double.parseDouble(tblProductos.getValueAt(i, 3).toString());
            cantvendida = Integer.parseInt(tblProductos.getValueAt(i, 4).toString());

            Producto producto = new Producto(nombre, id, id_categoria, costo, precio, cantvendida, nombre_categoria);
            productos.add(producto);
        }

        MetodosSort metodos = new MetodosSort();
        metodos.ShellSort(productos);
        LimpiarTabla();
        // se vuelve a llenar la tabla
        String[] fila = new String[5];
        for (Producto item : productos) {

            fila[0] = item.getProducto_nombre();
            fila[1] = item.getCategoria_nombre();
            fila[2] = String.valueOf(item.getProducto_costo());
            fila[3] = String.valueOf(item.getProducto_precio());
            fila[4] = String.valueOf(item.getProducto_cantvendida());
            dtm.addRow(fila);
        }

    }

    private void LimpiarTabla() {
        //se limpia la tabla para volver a llenar con la lista ordenada
        for (int i = tblProductos.getRowCount() - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
    }

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        switch (selectSorts.getSelectedIndex()) {
            case 0:
                MergeSort();
                break;
            case 1:
                BubleSort();
                break;
            case 2:
                SelectionSort();
                break;
            case 3:
                InsertioSort();
                break;
            case 4:
                QuickSort();
                break;

            case 5:
                ShellSort();
                break;

        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void agregarProducto() {
        dtm.addRow(new Object[]{
            txtProducto.getText(),
//            txtCategoria.getText(),
            txtCosto.getText(),
            txtPrecio.getText(),
//            txtCantidadVendida.getText()
        });
    }

    private void CargarProductos() {
        
        //si esta lleno limpia la tabla
        
         if (tblProductos.getRowCount()>0) {
            
                for (int i = tblProductos.getRowCount() - 1; i >= 0; i--) {
                dtm.removeRow(i);
             }
            
        }
        
        String[] headers = new String[]{"Producto_ID","Producto", "Categoria", "Costo S/", "Precio S/", "Cantidad vendida"};
        dtm.setColumnIdentifiers(headers);
        tblProductos.setModel(dtm);
        selectSorts.removeAllItems();
        selectSorts.addItem("Ordenar por cantidad vendida | Merge");
        selectSorts.addItem("Ordenar por producto | Buble");
        selectSorts.addItem("Ordenar por categoria | Selection");
        selectSorts.addItem("Ordenar por costo | Insertion");
        selectSorts.addItem("Ordenar por precio | Quick sort");
        selectSorts.addItem("Ordenar por cantidad vendida | Shell sort");

        ProductoService productoService = new ProductoServiceImpl();
        productos = productoService.listar();

        for (Integer count = 0; count < productos.size(); count++) {
            dtm.addRow(new Object[]{
                 productos.get(count).getProducto_id(),
                productos.get(count).getProducto_nombre(),
                productos.get(count).getCategoria_nombre(),
                productos.get(count).getProducto_costo(),
                productos.get(count).getProducto_precio(),
                productos.get(count).getProducto_cantvendida(),
                
            });
        }
    }

    private void eliminarProducto() {
        int fila = tblProductos.getSelectedRow();
        dtm.removeRow(fila);
    }

    private void actualizarProducto() {
        int fila = tblProductos.getSelectedRow();
        dtm.setValueAt(txtProducto.getText(), fila, 0);
//        dtm.setValueAt(txtCategoria.getText(), fila, 1);
        dtm.setValueAt(txtCosto.getText(), fila, 2);
        dtm.setValueAt(txtPrecio.getText(), fila, 3);
//        dtm.setValueAt(txtCantidadVendida.getText(), fila, 4);

    }

    private void tamaños() {
        tblProductos.getColumnModel().getColumn(0).setMaxWidth(450);
        tblProductos.getColumnModel().getColumn(0).setMinWidth(450);
        tblProductos.getColumnModel().getColumn(0).setPreferredWidth(450);

        tblProductos.getColumnModel().getColumn(1).setMaxWidth(200);
        tblProductos.getColumnModel().getColumn(1).setMinWidth(200);
        tblProductos.getColumnModel().getColumn(1).setPreferredWidth(200);

        tblProductos.getColumnModel().getColumn(2).setMaxWidth(80);
        tblProductos.getColumnModel().getColumn(2).setMinWidth(80);
        tblProductos.getColumnModel().getColumn(2).setPreferredWidth(80);

        tblProductos.getColumnModel().getColumn(3).setMaxWidth(80);
        tblProductos.getColumnModel().getColumn(3).setMinWidth(80);
        tblProductos.getColumnModel().getColumn(3).setPreferredWidth(80);

        tblProductos.getColumnModel().getColumn(4).setMaxWidth(120);
        tblProductos.getColumnModel().getColumn(4).setMinWidth(120);
        tblProductos.getColumnModel().getColumn(4).setPreferredWidth(120);
    }


    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
                
        
        BuscarHashmap();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmdnuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdnuevoActionPerformed
        // TODO add your handling code here:
        
        //accion: 1 insert , 2 uupdate
        Limpiar();
         accion=1;
        EstadoBotones(false);
        
    }//GEN-LAST:event_cmdnuevoActionPerformed

    private void cmdguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdguardarActionPerformed
        // TODO add your handling code here:
        //accion: 1 insert , 2 update
        if (accion==1) {
            
          Producto producto=new Producto();
          producto.setProducto_nombre(txtProducto.getText());
          producto.setProducto_costo(Double.parseDouble(txtCosto.getText()) );
          producto.setProducto_precio(Double.parseDouble(txtPrecio.getText()) );
          //para obtener el id de la categoria del combo
          int idcategoria=0;
          Categoria categoria =(Categoria) cmbcat.getSelectedItem();
          idcategoria=categoria.getCategoria_id();
          producto.setCategoria_id(idcategoria);
          ProductoService productoService = new ProductoServiceImpl();
          productoService.crear(producto);
          JOptionPane.showMessageDialog(rootPane, "Se registro correctamente", "Registro de categoria", JOptionPane.INFORMATION_MESSAGE, frameIcon);
            EstadoBotones(true);
          Limpiar();
           CargarProductos();
           
        }else if (accion==2){ 
            
          int fila=tblProductos.getSelectedRow();
             
          Producto producto=new Producto();
          producto.setProducto_id(Integer.parseInt( tblProductos.getValueAt(fila,0).toString()));
          producto.setProducto_nombre(txtProducto.getText());
          producto.setProducto_costo(Double.parseDouble(txtCosto.getText()) );
          producto.setProducto_precio(Double.parseDouble(txtPrecio.getText()) );
          //para obtener el id de la categoria del combo
          int idcategoria=0;
          Categoria categoria =(Categoria) cmbcat.getSelectedItem();
          idcategoria=categoria.getCategoria_id();
          producto.setCategoria_id(idcategoria);
          ProductoService productoService = new ProductoServiceImpl();
          productoService.update(producto);
             JOptionPane.showMessageDialog(rootPane, "Registro actualizado correctamente", "Registro de categoria", JOptionPane.INFORMATION_MESSAGE, frameIcon);
               EstadoBotones(true);
             Limpiar();
           CargarProductos();
        }
        
        
    }//GEN-LAST:event_cmdguardarActionPerformed
    private void Limpiar(){
        txtProducto.setText("");
        txtCosto.setText("");
        txtPrecio.setText("");
        cmbcat.setSelectedIndex(0);
        
    }
    private void cmdcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdcancelarActionPerformed
        // TODO add your handling code here:
        EstadoBotones(true);
    }//GEN-LAST:event_cmdcancelarActionPerformed

    private void cmdeditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdeditarActionPerformed
        // TODO add your handling code here:
        
           //accion: 1 insert , 2 uupdate
         accion=2;
        EstadoBotones(false);
    }//GEN-LAST:event_cmdeditarActionPerformed

    private void cmdsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdsalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cmdsalirActionPerformed

    private void tblProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosMouseClicked
        // TODO add your handling code here:
        
        if (tblProductos.getRowCount()>0) {
            
            int fila=tblProductos.getSelectedRow();
           
            txtProducto.setText(tblProductos.getValueAt(fila,1).toString());
            txtCosto.setText(tblProductos.getValueAt(fila,3).toString());
            txtPrecio.setText(tblProductos.getValueAt(fila,4).toString());
            
            cmbcat.setSelectedItem(tblProductos.getValueAt(fila,2).toString());
            //para identificar el idcategoria
            
        }
        
    }//GEN-LAST:event_tblProductosMouseClicked


    private void BuscarHashmap(){
        
       Hashtable<String, Producto> productosHash = new Hashtable<String, Producto>();

        for (int i = 0; i < productos.size(); i++) {
            
            productosHash.put(productos.get(i).getProducto_nombre(),productos.get(i));
            
        }
        
      
        Producto productoEncontrado = productosHash.get(txtnombre.getText());

        if (productoEncontrado != null) {
            
            JOptionPane.showMessageDialog(rootPane, "El producto con key " + txtnombre.getText() + " fue encotrado \n.");
            
            System.out.println("El producto con key " + txtnombre.getText() + " fue encotrado \n.");
            
        } else {
            JOptionPane.showMessageDialog(rootPane, "El producto con key " + txtnombre.getText() + "no fue encontrado \n.");
        }
    }
    
    private void CargarCategoria(){
        
        CategoriaService categoriaService = new CategoriaServiceImpl();
        List<Categoria> categorias = categoriaService.listar();
         for (Integer count = 0; count < categorias.size(); count++){
//                cmbcat.addItem( categorias.get(count).getCategoria_nombre()); 
                       int id=categorias.get(count).getCategoria_id();
                       String nombre= categorias.get(count).getCategoria_nombre();
                     cmbcat.addItem(new Categoria(id,0,nombre)); 
         }
       
                
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> cmbcat;
    private javax.swing.JButton cmdcancelar;
    private javax.swing.JButton cmdeditar;
    private javax.swing.JButton cmdguardar;
    private javax.swing.JButton cmdnuevo;
    private javax.swing.JButton cmdsalir;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblCategoria;
    private javax.swing.JLabel lblCosto;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblProducto;
    private javax.swing.JComboBox<String> selectSorts;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextPane txtCosto;
    private javax.swing.JTextPane txtPrecio;
    private javax.swing.JTextPane txtProducto;
    private javax.swing.JTextField txtnombre;
    // End of variables declaration//GEN-END:variables
}
